{"version":3,"file":"bundle.cjs.js","sources":["../src/utils/index.ts","../src/core/validate.ts","../src/core/transform.ts","../src/core/parse.ts","../src/core/index.ts"],"sourcesContent":["enum typeEnum {\n    \"string\"=\"[object String]\",\n    \"number\"=\"[object Number]\",\n    \"boolean\"=\"[object Boolean]\",\n    \"undefined\"=\"object Undefined]\",\n    \"null\"=\"object Null]\",\n    \"object\"=\"[object Object]\",\n    \"function\"=\"[object Function]\",\n    \"array\"=\"[object Array]\",\n    \"date\"=\"[object Date]\",\n    \"reg\"=\"[object RegExp]\"\n}\n\n/**\n * Verify that a value is an object\n * @param {any} obj \n * @returns {boolean}\n * @author  chrislee\n * @Time 2020/7/12\n */\nexport const isObject:(obj:any)=>boolean = (obj) =>{\n    let res = true;\n    if(Object.prototype.toString.call(obj) === '[object Object]'){\n        res = true;\n    }else{\n        res = false;\n    }\n    return res;\n};\n\n/**\n * Verify that a value is undefined\n * @param {any} obj\n * @returns {boolean}\n * @author chrislee\n * @Time 2020/7/12\n */\nexport const isUndefined:(obj:any)=>boolean = (obj) => {\n    let res: boolean;\n    if(obj === undefined||Object.prototype.toString.call(obj)===typeEnum[\"undefined\"]){\n        res = true;\n    }else{\n        res = false;\n    }\n    return res;\n};\n\n/**\n * Verify that a value is an array\n * @param {any} obj\n * @returns {boolean}\n * @author chrislee\n * @Time 2020/7/12\n */\nexport const isArray:(obj:any)=>boolean = (obj) =>{\n    let res:boolean;\n    if(obj instanceof Array || Object.prototype.toString.call(obj)===typeEnum[\"array\"]){\n        res = true;\n    }else{\n        res = false;\n    }\n    return res;\n};\n\n/**\n * Verify that a value is an boolean\n * @param {any} obj\n * @returns {boolean}\n * @author chrislee\n * @Time 2020/7/12\n */\nexport const isBoolean:(obj:any) => boolean = (obj) => {\n    let res:boolean;\n    if(obj instanceof Array || Object.prototype.toString.call(obj)===typeEnum[\"boolean\"]){\n        res = true;\n    }else{\n        res = false;\n    }\n    return res;\n};\n\nexport const typeValidate:(obj:any,type:keyof typeof typeEnum,constant:string)=>boolean = (obj,type,constant=`The value of target`) =>{\n    let res:boolean;\n    if(Object.prototype.toString.call(obj)=== typeEnum[type]){\n        res = true;\n    }else{\n        let currentType = `undefined`;\n        for(const key in typeEnum){\n            if(typeEnum[key] === Object.prototype.toString.call(obj)){\n                currentType = key;\n            }\n        }\n        throw Error(`TypeError:${constant} expect a ${type},but got ${currentType}`);\n    }\n    return res;\n};","import * as utils from \"../utils\";\nexport interface ModuleListType {\n    [key:string]:boolean\n}\n\nexport interface OptionType {\n    type:\"esm\"|\"cjs\",\n    target:ModuleListType|undefined|string[]\n}\n\n/**\n * validate the option and normalize it \n * @param opt loader option\n */\nconst optionValidate = (opt:OptionType):ModuleListType => {\n    const {target,type} = opt;\n    const typeExpect:string[] = [\"esm\",\"cjs\"];\n    if(utils.typeValidate(type,\"string\",`The type param in module-remover's option`)){\n        if(typeExpect.includes(type)===false){\n            throw Error(`The type param in module-remover's option only recieve keyword 'esm' or 'cjs'`);\n        }\n    }\n    const isArray = utils.isArray(target);\n    const isObj = utils.isObject(target);\n    const targetObject = Object.create(null);\n    if(isArray){\n        if((target as string[]).length <1) return {};\n        for(const item of (target as string[])){\n           if(utils.typeValidate(item,\"string\",`The value of target array in the module-remover's option`)){\n            targetObject[item] =true;\n           } \n        }\n    }else if(isObj){\n        const keys:string[] = Object.keys(target as ModuleListType);\n        for(const item of keys){\n            if(utils.typeValidate((target as ModuleListType)[item],\"boolean\",`The value of target object in the module-remover's option`)){\n                targetObject[item] = (target as ModuleListType)[item];\n            }\n        }\n    }\n    return targetObject;\n};\n\nexport default optionValidate;","import traverse,{Visitor} from \"@babel/traverse\";\nimport {ModuleListType} from \"./validate\";\nimport { File, Identifier } from \"@babel/types\";\n\n/**\n * Transform a ast tree for removing the module \n * @param ast The AST object, it usually come from @babel/praser's return\n * @param type The module type ,only support EsModule and commonJs\n * @param moduleList The list of modules that user want to remove or keep it\n * @author chrislee\n * @Time 2020/7/18\n */\nexport const transform = (ast:File,type:\"esm\"|\"cjs\",moduleList:ModuleListType):void => {\n    const targetModules:string[] = Object.keys(moduleList).filter((v:string)=>moduleList[v]===true);\n    const visitor:Visitor = type===\"esm\"?esmTransformer(targetModules):cjsTransformer(targetModules);\n    traverse(ast,visitor);\n};\n\n/**\n * The traverse's rule about Esmodule\n * @param targetModules The list of modules that user want to remove or keep it\n * @returns {visiter} a rule of traverse\n * @author chrislee\n * @Time 2020/7/18\n */\nfunction esmTransformer(targetModules:string[]):Visitor {\n    const visitor:Visitor = {\n        ImportDeclaration(path){\n            const {source} = path.node;\n            if(targetModules.includes(source.value)){\n                path.remove();\n            }\n        }\n    };\n    return visitor;\n}\n\n/**\n * The traverse's rule about commonJs\n * @param targetModules The list of modules that user want to remove or keep it\n * @returns {visiter} a rule of traverse\n * @author chrislee\n * @Time 2020/7/18\n */\nfunction cjsTransformer(targetModules:string[]):Visitor {\n    const visitor:Visitor = {\n        VariableDeclaration(path){\n            const {declarations} = path.node;\n            Array.from(declarations).forEach(declarator => {\n                const {init} = declarator;\n                if(init?.type === \"CallExpression\"){\n                    const callee = init.callee as Identifier;\n                    if(callee.name&&callee.name === \"require\"){\n                        const {arguments:args} = init;\n                        const isTarget:boolean = args.some((v) => {\n                            if(v.type === \"StringLiteral\"&&targetModules.includes(v.value)===true){\n                                return true;\n                            }else{\n                                return false;\n                            }\n                        });\n                        if(isTarget){\n                            path.remove();\n                        }\n                    }\n                }\n            });\n        },\n        ExpressionStatement(path){\n            const {expression} = path.node;\n            if(expression.type === \"CallExpression\"){\n                const callee = expression.callee as Identifier;\n                if(callee.name&&callee.name === \"require\") {\n                    const {arguments:args} = expression;\n                        const isTarget:boolean = args.some((v) => {\n                            if(v.type === \"StringLiteral\"&&targetModules.includes(v.value)===true){\n                                return true;\n                            }else{\n                                return false;\n                            }\n                        });\n                        if(isTarget){\n                            path.remove();\n                        }\n                }\n            }\n        }\n    };\n    return visitor;\n}","import {parse} from \"@babel/parser\";\nimport { File } from \"@babel/types\";\n\n/**\n * Use '@babel/parser' to prase the code\n * @param code the code that need to transform to AST\n * @author chrislee\n * @Time 2020/7/14\n */\nexport const prase = (code:string):File => {\n    const ast = parse(code);\n    return ast;\n};","import loaderUtils from \"loader-utils\";\nimport generator from \"@babel/generator\";\nimport optionValidate from \"./validate\";\nimport {transform} from \"./transform\";\nimport {prase} from \"./parse\";\n\n/**\n * use loader Option to remove some module we don`t want to import in final static file\n * @param source webpack chunk content \n * @author chrislee\n * @since 2020/7/11\n */\nfunction moudleRemover(this: any, source:string):string{\n    const opt = loaderUtils.getOptions(this);\n    const normalizeOpt = optionValidate(opt as any);\n    const ast = prase(source);\n    transform(ast,(opt.type as any),normalizeOpt);\n    const result = generator(ast);\n    return result.code;\n}\n\nexport default moudleRemover;"],"names":["utils.typeValidate","isArray","utils.isArray","utils.isObject","parse"],"mappings":"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"}